diff -ruN pdp-0.12.4/include/pdp_dpd_base.h ../t/pdp-0.12.4/include/pdp_dpd_base.h
--- pdp-0.12.4/include/pdp_dpd_base.h	2003-09-15 22:02:16.000000000 +0200
+++ pdp-0.12.4/include/pdp_dpd_base.h	2005-12-27 07:56:18.000000000 +0100
@@ -122,7 +122,7 @@
 void pdp_dpd_base_register_command_factory_method(void *x, t_pdp_newmethod command_factory_method);
 
 /* class setup method */
-void pdp_dpd_base_setup(t_class *class);
+void pdp_dpd_base_setup(t_class *c);
 
 /* add a command to the process queue */
 void pdp_dpd_base_queue_command(void *x, void *c, t_pdp_method process, 
diff -ruN pdp-0.12.4/opengl/include/pdp_3dp_base.h ../t/pdp-0.12.4/opengl/include/pdp_3dp_base.h
--- pdp-0.12.4/opengl/include/pdp_3dp_base.h	2003-09-14 00:44:40.000000000 +0200
+++ pdp-0.12.4/opengl/include/pdp_3dp_base.h	2005-12-27 07:56:07.000000000 +0100
@@ -15,7 +15,7 @@
 void pdp_3dp_base_init(void *x);
 
 /* class setup method */
-void pdp_3dp_base_setup(t_class *class);
+void pdp_3dp_base_setup(t_class *c);
 
 
 /* base class methods */
diff -ruN pdp-0.12.5.old/opengl/Makefile.config pdp-0.12.5/opengl/Makefile.config
--- pdp-0.12.5.old/opengl/Makefile.config       2009-10-29 13:35:40.000000000 +0100
+++ pdp-0.12.5/opengl/Makefile.config   2009-10-29 13:36:42.000000000 +0100
@@ -18,7 +18,7 @@
 UNAME := $(shell uname -s)
 ifeq ($(UNAME),Linux)
   TARGET=linux
-LDFLAGS =  -lGL -lglut
+LDFLAGS =  -lGL -lglut -lcal3d -lgltt
 endif
 ifeq ($(UNAME),Darwin)
   TARGET = darwin
diff -ruN pdp-0.12.4/opengl/modules/Makefile ../t/pdp-0.12.4/opengl/modules/Makefile
--- pdp-0.12.4/opengl/modules/Makefile	2003-06-22 18:44:35.000000000 +0200
+++ pdp-0.12.4/opengl/modules/Makefile	2005-12-27 07:48:13.000000000 +0100
@@ -3,7 +3,7 @@
 all:	pdp_3d_windowcontext.o pdp_3d_draw.o pdp_3d_view.o \
 	pdp_3d_push.o pdp_3d_light.o pdp_3d_dlist.o pdp_3d_color.o \
 	pdp_3d_snap.o pdp_3d_drawmesh.o pdp_3d_for.o pdp_3d_state.o \
-	pdp_3d_subcontext.o
+	pdp_3d_subcontext.o pdp_3d_cal3d.o pdp_3d_text.o
 
 clean:
 	rm -rf *~ *.o
diff -ruN pdp-0.12.4/opengl/modules/pdp_3d_cal3d.cpp ../t/pdp-0.12.4/opengl/modules/pdp_3d_cal3d.cpp
--- pdp-0.12.4/opengl/modules/pdp_3d_cal3d.cpp	1970-01-01 01:00:00.000000000 +0100
+++ pdp-0.12.4/opengl/modules/pdp_3d_cal3d.cpp	2005-12-27 07:47:38.000000000 +0100
@@ -0,0 +1,544 @@
+/*
+ *   Pure Data Packet module.
+ *   Copyright (c) by Tom Schouten <pdp@zzz.kotnet.org>
+ *
+ *   This program is free software; you can redistribute it and/or modify
+ *   it under the terms of the GNU General Public License as published by
+ *   the Free Software Foundation; either version 2 of the License, or
+ *   (at your option) any later version.
+ *
+ *   This program is distributed in the hope that it will be useful,
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *   GNU General Public License for more details.
+ *
+ *   You should have received a copy of the GNU General Public License
+ *   along with this program; if not, write to the Free Software
+ *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ *
+ */
+
+//#include "GL/gl.h"
+#include <GL/glut.h>
+#include <math.h>
+
+extern "C" {
+#include "pdp_opengl.h"
+#include "pdp_3dp_base.h"
+}
+
+#include <iostream>
+#include <string>
+#include <vector>
+#include <cal3d/cal3d.h>
+
+
+
+
+typedef struct _drawcommand
+{
+    t_pdp_dpd_command x_head;
+    int x_context_packet;
+    int x_texture_packet;
+    float x_p0;
+    float x_p1;
+    float x_p2;
+    float x_p3;
+    t_pdp_method x_method;
+    CalModel *myModel;
+    GLUquadric* x_quadric; 
+    int x_have_texture; /* is there a valid texture ? */
+    int x_ready;
+    
+} t_drawcommand;
+
+
+typedef struct _pdp_3d_cal3d
+{
+    t_pdp_3dp_base x_base;
+    t_pdp_dpd_commandfactory x_clist;
+
+    int x_inlets;
+    float x_p0;
+    float x_p1;
+    float x_p2;
+    float x_p3;
+    int x_ready;
+
+    t_pdp_method x_method;
+    CalCoreModel *myCoreModel;
+    CalModel *myModel;
+
+
+    int idleAnimationId, walkAnimationId, limpAnimationId, waveAnimationId;
+    int upperBodyMeshId, lowerBodyMeshId, helmetMeshId;
+    int x_tex_in;       /* the number of texture inlets */
+    GLUquadric* x_quadric; 
+    
+} t_pdp_3d_cal3d;
+
+
+void pdp_3d_cal3d_delete_texture(t_pdp_3d_cal3d *x)
+{
+    pdp_base_move_packet(x, 1);
+}
+
+    
+    /* return a new command object */
+void *pdp_3d_cal3d_get_command_object(t_pdp_3d_cal3d *x)
+{
+    t_drawcommand *c = (t_drawcommand *)pdp_dpd_commandfactory_get_new_command(&x->x_clist);
+    c->x_p0 = x->x_p0;
+    c->x_p1 = x->x_p1;
+    c->x_p2 = x->x_p2;
+    c->x_p3 = x->x_p3;
+    c->x_ready = x->x_ready;
+    c->myModel = x->myModel;
+    c->x_context_packet = pdp_3dp_base_get_context_packet(x);
+    c->x_texture_packet = pdp_packet_copy_ro(pdp_base_get_packet(x, 1));
+
+    c->x_quadric = x->x_quadric; /* $$$TODO: this assumes quadric doesn't change */
+
+    c->x_method = x->x_method;
+    //post("o: %x, vc %x, n %d, u %d", x, c, x->x_clist.nb_commands, c->x_head.used);
+    return c;
+}
+
+/* object drawing methods */
+static void draw_cal3d(t_drawcommand *x)
+{
+    if (x->x_ready)
+    {
+	int m_vertexCount;
+	int m_faceCount;
+        x->myModel->update(x->x_p0);
+        x->myModel->setLodLevel(x->x_p1);
+	glPushMatrix();
+	CalRenderer *pCalRenderer = x->myModel->getRenderer();
+	if(pCalRenderer->beginRendering())
+	{
+		glEnableClientState(GL_VERTEX_ARRAY);
+		glEnableClientState(GL_NORMAL_ARRAY);
+
+		int meshCount = pCalRenderer->getMeshCount();
+		for(int meshId = 0; meshId < meshCount; meshId++)
+		{
+			int submeshCount = pCalRenderer->getSubmeshCount(meshId);
+			for(int submeshId = 0; submeshId < submeshCount; submeshId++)
+			{
+				if(pCalRenderer->selectMeshSubmesh(meshId, submeshId))
+				{
+					static float meshVertices[30000][3];
+					int vertexCount = pCalRenderer->getVertices(&meshVertices[0][0]);
+					static float meshNormals[30000][3];
+					pCalRenderer->getNormals(&meshNormals[0][0]);
+					static float meshTextureCoordinates[30000][2];
+					int textureCoordinateCount = pCalRenderer->getTextureCoordinates(0, &meshTextureCoordinates[0][0]);
+					static CalIndex meshFaces[50000][3];
+					int faceCount = pCalRenderer->getFaces(&meshFaces[0][0]);
+					glVertexPointer(3, GL_FLOAT, 0, &meshVertices[0][0]);
+					glNormalPointer(GL_FLOAT, 0, &meshNormals[0][0]);
+					if( (textureCoordinateCount > 0) && x->x_have_texture)
+				        {
+					  glEnable(GL_TEXTURE_2D);
+					  glEnableClientState(GL_TEXTURE_COORD_ARRAY);
+					  glEnable(GL_COLOR_MATERIAL);
+	                                  pdp_packet_texture_make_current(x->x_texture_packet);
+					  glTexCoordPointer(2, GL_FLOAT, 0, &meshTextureCoordinates[0][0]);
+					  //glColor3f(1.0f, 1.0f, 1.0f);
+				        }
+				   if(sizeof(CalIndex)==2)
+					glDrawElements(GL_TRIANGLES, faceCount * 3, GL_UNSIGNED_SHORT, &meshFaces[0][0]);
+				   else
+					glDrawElements(GL_TRIANGLES, faceCount * 3, GL_UNSIGNED_INT, &meshFaces[0][0]);
+				   if( (textureCoordinateCount > 0)&& x->x_have_texture)
+				   {
+					   glDisable(GL_COLOR_MATERIAL);
+					   glDisableClientState(GL_TEXTURE_COORD_ARRAY);
+					   glDisable(GL_TEXTURE_2D);
+				   }
+				m_vertexCount += vertexCount;
+				m_faceCount += faceCount;
+			}
+		}
+	}
+	//glDisableClientState(GL_TEXTURE_COORD_ARRAY);
+	glDisableClientState(GL_NORMAL_ARRAY);
+	glDisableClientState(GL_VERTEX_ARRAY);
+		
+				
+	}
+	glPopMatrix();
+    }
+}
+
+/* the actual (registered) draw method */
+/* when this is finished, the drawcommand object should commit suicide */
+
+static void draw_process(t_drawcommand *x)
+{
+    int p = x->x_context_packet;
+    int pt = x->x_texture_packet;
+    float fx=1;
+    float fy=1;
+    x->x_have_texture = pdp_packet_texture_isvalid(pt);
+
+    //post("pdp_3d_cal3d: context = %d, texture = %d", p, pt);
+ 
+    /* check if it's a valid buffer we can draw in */
+    if (pdp_packet_3Dcontext_isvalid(p)){ 
+	
+
+	/* setup rendering context */
+	pdp_packet_3Dcontext_set_rendering_context(p);
+
+	/* enable texture */
+	//if (0) {
+	if (x->x_have_texture){
+	    fx = pdp_packet_texture_fracx(pt);
+	    fy = pdp_packet_texture_fracy(pt);
+	    glEnable(GL_TEXTURE_2D);
+	    pdp_packet_texture_make_current(pt);
+	    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
+	    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
+	    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR);
+	    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR);
+	    glTexEnvi(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE);	   
+
+	    // scale texture matrix to reflect subtexture's coords */
+	    glMatrixMode(GL_TEXTURE);
+	    //glLoadIdentity();
+	    glPushMatrix();
+	    glScalef(fx, fy, 1);
+	    glMatrixMode(GL_MODELVIEW);
+
+	    gluQuadricTexture(x->x_quadric, 1);
+	}
+
+	/* call the generating method */
+	if (x->x_method) (*x->x_method)(x);
+
+	/* disable texture */
+	if (x->x_have_texture) {
+	//if (0){
+	    glMatrixMode(GL_TEXTURE);
+	    glPopMatrix();
+	    glMatrixMode(GL_MODELVIEW);
+	    glDisable(GL_TEXTURE_2D);
+	    gluQuadricTexture(x->x_quadric, 0);
+	}
+
+    }
+
+    /* you know the drill: command done, sword in belly. */
+    pdp_packet_mark_unused(x->x_texture_packet);
+    pdp_dpd_command_suicide(x);
+
+}
+
+static void pdp_3d_cal3d_clear_cycle(t_pdp_3d_cal3d *x, t_floatarg f){
+	//id = x->myCoreModel->getCoreAnimationId(s->s_name);
+	x->myModel->getMixer()->clearCycle((int)f, 0.3);
+}
+static void pdp_3d_cal3d_flipuv(t_pdp_3d_cal3d *x) {
+	CalLoader::setLoadingMode(LOADER_INVERT_V_COORD);
+}
+static void pdp_3d_cal3d_add_cycle(t_pdp_3d_cal3d *x, t_floatarg f) {
+    if (x->x_ready)
+	x->myModel->getMixer()->blendCycle((int)f, 0.5,0);
+}
+static void pdp_3d_cal3d_set_cycle(t_pdp_3d_cal3d *x, t_floatarg f) {
+    int i;
+    if (x->x_ready)
+    {
+	for (i = 0; i<x->myCoreModel->getCoreAnimationCount();i++)
+	{
+		x->myModel->getMixer()->clearCycle(i,0.3); 
+	}
+	x->myModel->getMixer()->blendCycle((int)f, 0.5,0.0);
+    }
+}
+static void pdp_3d_cal3d_action(t_pdp_3d_cal3d *x, t_floatarg f) {
+    if (x->x_ready)
+	x->myModel->getMixer()->executeAction((int)f,0.2,0.2);
+}
+
+static void pdp_3d_cal3d_p0(t_pdp_3d_cal3d *x, t_floatarg f){
+    if (x->x_ready)
+	x->x_p0 = f;
+}
+static void pdp_3d_cal3d_p1(t_pdp_3d_cal3d *x, t_floatarg f){
+    if (x->x_ready)
+	x->x_p1 = f;
+}
+static void pdp_3d_cal3d_p2(t_pdp_3d_cal3d *x, t_floatarg f){
+    if (x->x_ready)
+	x->myModel->getMixer()->setAnimationTime(f);
+}
+static void pdp_3d_cal3d_p3(t_pdp_3d_cal3d *x, t_floatarg f){
+    if (x->x_ready)
+	x->x_p3 = f;
+}
+
+
+t_class *pdp_3d_cal3d_class;
+
+
+
+void pdp_3d_cal3d_free(t_pdp_3d_cal3d *x)
+{
+    //x->myCoreModel->destroy();
+    pdp_3dp_base_free(x);
+    gluDeleteQuadric(x->x_quadric);
+    pdp_dpd_commandfactory_free(&x->x_clist);
+    
+}
+
+void pdp_3d_cal3d_object(t_pdp_3d_cal3d *x)
+{
+
+    x->x_method = (t_pdp_method)draw_cal3d;    
+    x->x_inlets = 3;
+
+    // the number of texture inlets
+    x->x_tex_in = 1;
+}
+
+bool pdp_3d_cal3d_load(t_pdp_3d_cal3d *x,char *strFilename)
+{
+  if (x->myCoreModel)
+	  delete x->myCoreModel;
+  x->myCoreModel = new CalCoreModel("pdcal3d");
+  //x->myCoreModel = new CalCoreModel();
+  //x->myCoreModel->create("pdcal3d");
+  // open the model configuration file
+  float m_scale;
+  std::ifstream file;
+  file.open(strFilename, std::ios::in | std::ios::binary);
+  if(!file)
+  {
+    post( "Failed to open model configuration file %s", strFilename);
+    return false;
+  }
+  char *dup = strdup(strFilename);
+  char *separador = strrchr(dup,'/');
+  separador[0]='\0';
+  chdir(dup);
+
+  // parse all lines from the model configuration file
+  int line;
+  for(line = 1; ; line++)
+  {
+    // read the next model configuration line
+    std::string strBuffer;
+    std::getline(file, strBuffer);
+
+    // stop if we reached the end of file
+    if(file.eof()) break;
+
+    // check if an error happend while reading from the file
+    if(!file)
+    {
+      std::cerr << "Error while reading from the model configuration file '" << strFilename << "'." << std::endl;
+      return false;
+    }
+
+    // find the first non-whitespace character
+    std::string::size_type pos;
+    pos = strBuffer.find_first_not_of(" \t");
+
+    // check for empty lines
+    if((pos == std::string::npos) || (strBuffer[pos] == '\n') || (strBuffer[pos] == '\r') || (strBuffer[pos] == 0)) continue;
+
+    // check for comment lines
+    if(strBuffer[pos] == '#') continue;
+
+    // get the key
+    std::string strKey;
+    strKey = strBuffer.substr(pos, strBuffer.find_first_of(" =\t\n\r", pos) - pos);
+    pos += strKey.size();
+
+    // get the '=' character
+    pos = strBuffer.find_first_not_of(" \t", pos);
+    if((pos == std::string::npos) || (strBuffer[pos] != '='))
+    {
+      std::cerr << strFilename << "(" << line << "): Invalid syntax." << std::endl;
+      return false;
+    } 
+
+
+    // find the first non-whitespace character after the '=' character
+    pos = strBuffer.find_first_not_of(" \t", pos + 1);
+    // get the data
+    std::string strData;
+    strData = strBuffer.substr(pos, strBuffer.find_first_of("\n\r", pos) - pos);
+
+    // handle the model creation
+    if(strKey == "scale")
+    {
+      // set rendering scale factor
+      m_scale = atof(strData.c_str());
+    }
+    else if(strKey == "skeleton")
+    {
+      // load core skeleton
+      std::cout << "Loading skeleton '" << strData << "'..." << std::endl;
+      if(!x->myCoreModel->loadCoreSkeleton(strData))
+      {
+        CalError::printLastError();
+        return false;
+      }
+    }
+    else if(strKey == "animation")
+    {
+      // load core animation
+      std::cout << "Loading animation '" << strData << "'..." << std::endl;
+      if(x->myCoreModel->loadCoreAnimation(strData) == -1)
+      {
+        CalError::printLastError();
+        return false;
+      }
+    }
+    else if(strKey == "mesh")
+    {
+      // load core mesh
+      std::cout << "Loading mesh '" << strData << "'..." << std::endl;
+      if(x->myCoreModel->loadCoreMesh(strData) == -1)
+      {
+        CalError::printLastError();
+        return false;
+      }
+    }
+    else if(strKey == "material")
+    {
+      // load core material
+      std::cout << "Loading material '" << strData << "'..." << std::endl;
+      if(x->myCoreModel->loadCoreMaterial(strData) == -1)
+      {
+        CalError::printLastError();
+        return false;
+      }
+    }
+
+    else
+    {
+      // everything else triggers an error message, but is ignored
+      std::cerr << strFilename << "(" << line << "): Invalid syntax." << std::endl;
+    }
+  }
+
+  // explicitely close the file
+  file.close();
+  if (x->myModel)
+	  delete x->myModel;
+  x->myModel = new CalModel(x->myCoreModel);
+  //x->myModel = new CalModel();
+  //x->myModel->create(x->myCoreModel);
+  for(int meshId = 0; meshId < x->myCoreModel->getCoreMeshCount(); meshId++)
+  {
+	  x->myModel->attachMesh(meshId);
+  }
+  if(x->myCoreModel->getCoreAnimationCount() > 0)
+  {
+     int m_currentAnimationId = 0;
+     if(x->myCoreModel->getCoreAnimationCount() > 1)
+     {
+	     x->myModel->getMixer()->executeAction(m_currentAnimationId, 0.0f,2);
+     }
+     else
+     {
+	     x->myModel->getMixer()->blendCycle(m_currentAnimationId, 0.5f, 0.0f);
+     }
+  }
+  free(dup);
+  x->x_ready = 1;
+  post("model loaded");
+  return true;   
+}
+
+static void pdp_3d_cal3d_open(t_pdp_3d_cal3d *x, t_symbol *scfgfile  )
+{
+    x->x_ready = pdp_3d_cal3d_load(x,scfgfile->s_name);
+}
+
+extern "C"
+void *pdp_3d_cal3d_new( t_floatarg p0, t_floatarg p1, t_floatarg p2, t_floatarg p3)
+{
+    t_pdp_3d_cal3d *x = (t_pdp_3d_cal3d *)pd_new(pdp_3d_cal3d_class);
+       
+    char param[] = "p0";
+    int i;
+
+    /* super init */
+    pdp_3dp_base_init(x);
+
+    x->x_p0 = p0;
+    x->x_p1 = p1;
+    x->x_p2 = p2;
+    x->x_p3 = p3;
+    x->x_ready = 0;
+
+    /* set the object & number of inlets */
+    pdp_3d_cal3d_object(x);
+
+    /* create texture inlets */
+    for(i=0; i<x->x_tex_in; i++){
+	pdp_base_add_pdp_inlet(x);
+    }
+
+    /* create additional inlets */
+    for(i=0; i<x->x_inlets; i++){
+	pdp_base_add_gen_inlet(x, gensym("float"), gensym(param));
+	param[1]++;
+    }
+
+    /* create dpd outlet */
+    pdp_3dp_base_add_outlet(x, (t_pdp_method)draw_process, 0);
+
+    /* setup quadric */
+    x->x_quadric = gluNewQuadric();
+   
+    /* init command list */
+    pdp_dpd_commandfactory_init(&x->x_clist, sizeof(t_drawcommand));
+
+    /* register command factory method */
+    pdp_dpd_base_register_command_factory_method(x, (t_pdp_newmethod)pdp_3d_cal3d_get_command_object);
+    //pdp_3d_cal3d_load(x,"/home/caedes/CRYSTALSPACE/cal3d/data/skeleton/skeleton.cfg");
+    
+    return (void *)x;
+}
+
+
+#ifdef __cplusplus
+extern "C"
+{
+#endif
+
+
+void pdp_3d_cal3d_setup(void)
+{
+
+
+    pdp_3d_cal3d_class = class_new(gensym("3dp_cal3d"), (t_newmethod)pdp_3d_cal3d_new,
+    	(t_method)pdp_3d_cal3d_free, sizeof(t_pdp_3d_cal3d), 0,  
+				  A_DEFFLOAT, A_DEFFLOAT, A_DEFFLOAT, A_DEFFLOAT, A_NULL);
+    pdp_3dp_base_setup(pdp_3d_cal3d_class);
+
+    class_addmethod(pdp_3d_cal3d_class, (t_method)pdp_3d_cal3d_p0, gensym("p0"),  A_DEFFLOAT, A_NULL);  
+    class_addmethod(pdp_3d_cal3d_class, (t_method)pdp_3d_cal3d_p1, gensym("p1"),  A_DEFFLOAT, A_NULL);  
+    class_addmethod(pdp_3d_cal3d_class, (t_method)pdp_3d_cal3d_p2, gensym("p2"),  A_DEFFLOAT, A_NULL);  
+    class_addmethod(pdp_3d_cal3d_class, (t_method)pdp_3d_cal3d_p3, gensym("p3"),  A_DEFFLOAT, A_NULL);  
+    class_addmethod(pdp_3d_cal3d_class, (t_method)pdp_3d_cal3d_add_cycle, gensym("addcycle"),  A_DEFFLOAT, A_NULL);  
+    class_addmethod(pdp_3d_cal3d_class, (t_method)pdp_3d_cal3d_flipuv, gensym("flipuv"), A_NULL);  
+    class_addmethod(pdp_3d_cal3d_class, (t_method)pdp_3d_cal3d_set_cycle, gensym("setcycle"),  A_DEFFLOAT, A_NULL);  
+    class_addmethod(pdp_3d_cal3d_class, (t_method)pdp_3d_cal3d_clear_cycle, gensym("clearcycle"),  A_DEFFLOAT, A_NULL);  
+    class_addmethod(pdp_3d_cal3d_class, (t_method)pdp_3d_cal3d_action, gensym("action"),  A_DEFFLOAT, A_NULL);  
+    class_addmethod(pdp_3d_cal3d_class, (t_method)pdp_3d_cal3d_open, gensym("open"),  A_SYMBOL, A_NULL);
+
+    class_addmethod(pdp_3d_cal3d_class, (t_method)pdp_3d_cal3d_delete_texture, gensym("delete_texture"),  A_DEFFLOAT, A_NULL);  
+
+}
+
+#ifdef __cplusplus
+}
+#endif
diff -ruN pdp-0.12.4/opengl/modules/pdp_3d_text.cpp ../t/pdp-0.12.4/opengl/modules/pdp_3d_text.cpp
--- pdp-0.12.4/opengl/modules/pdp_3d_text.cpp	1970-01-01 01:00:00.000000000 +0100
+++ pdp-0.12.4/opengl/modules/pdp_3d_text.cpp	2005-12-27 07:47:43.000000000 +0100
@@ -0,0 +1,447 @@
+/*
+ *   Pure Data Packet module.
+ *   Copyright (c) by Tom Schouten <pdp@zzz.kotnet.org>
+ *
+ *   This program is free software; you can redistribute it and/or modify
+ *   it under the terms of the GNU General Public License as published by
+ *   the Free Software Foundation; either version 2 of the License, or
+ *   (at your option) any later version.
+ *
+ *   This program is distributed in the hope that it will be useful,
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *   GNU General Public License for more details.
+ *
+ *   You should have received a copy of the GNU General Public License
+ *   along with this program; if not, write to the Free Software
+ *   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ *
+ */
+
+//#include "GL/gl.h"
+#include <GL/glut.h>
+#include <math.h>
+#include <wchar.h>
+
+extern "C" {
+#include "pdp_opengl.h"
+#include "pdp_3dp_base.h"
+}
+#include "gltt/GLTTFont.h"
+#include "gltt/GLTTBitmapFont.h"
+#include "gltt/GLTTPixmapFont.h"
+#include "gltt/GLTTOutlineFont.h"
+#include "gltt/FTFace.h"
+
+
+typedef struct _drawcommand
+{
+    t_pdp_dpd_command x_head;
+    int x_context_packet;
+    int x_texture_packet;
+    float x_p0;
+    float x_p1;
+    float x_p2;
+    float x_p3;
+    char **new_font;
+    t_pdp_method x_method;
+    GLUquadric* x_quadric; 
+    int x_have_texture; /* is there a valid texture ? */
+    GLTTOutlineFont **ofont;
+    GLTTBitmapFont **bfont;
+    GLTTFont **font;
+    GLTTPixmapFont **pfont;
+    FTFace **aface;
+    char *text_array;
+    
+} t_drawcommand;
+
+
+typedef struct _pdp_3d_text
+{
+    t_pdp_3dp_base x_base;
+    t_pdp_dpd_commandfactory x_clist;
+
+    int x_inlets;
+    float x_p0;
+    float x_p1;
+    float x_p2;
+    float x_p3;
+    char *new_font;
+
+    t_pdp_method x_method;
+
+    int x_tex_in;       /* the number of texture inlets */
+    GLUquadric* x_quadric; 
+    GLTTOutlineFont *ofont;
+    GLTTBitmapFont *bfont;
+    GLTTFont *font;
+    GLTTPixmapFont *pfont;
+    FTFace *aface;
+    char *text_array;
+} t_pdp_3d_text;
+
+
+void pdp_3d_text_delete_texture(t_pdp_3d_text *x)
+{
+    pdp_base_move_packet(x, 1);
+}
+
+static void pdp_3d_text_font(t_pdp_3d_text *x, t_symbol *sfont  )
+{
+    x->new_font = (char*)malloc((strlen(sfont->s_name))*sizeof(char));
+    strcpy(x->new_font,sfont->s_name);
+    post("loading new font: %s",x->new_font);
+}
+
+static
+void pdp_3d_text_text(t_pdp_3d_text *x, t_symbol *s, int argc, t_atom *argv)
+{
+	int i, len = 0;
+	for (i=0;i<argc;i++)
+	{
+	    if (argv[i].a_type == A_SYMBOL)
+	        len += (strlen( argv[i].a_w.w_symbol->s_name )+1);
+	    if (argv[i].a_type == A_FLOAT)
+	        len += ilogbf( argv[i].a_w.w_float )+2;
+	}
+	if (x->text_array)
+		free(x->text_array);
+	x->text_array = (char *) malloc( (len+1)*sizeof(char) );
+	x->text_array[0]='\0';
+	for (i=0;i<argc;i++)
+	{
+	    if (argv[i].a_type == A_SYMBOL)
+		strcat(x->text_array,argv[i].a_w.w_symbol->s_name);
+	    if (argv[i].a_type == A_FLOAT)
+		sprintf(x->text_array,"%s%.0f",x->text_array,argv[i].a_w.w_float);
+            strcat(x->text_array," ");
+	}
+	x->text_array[len]='\0';
+	//memcpy(x->text_array,argv[0].a_w.w_symbol->s_name,len);
+	//x->text_array[len]=0;
+	post("added text: %s %d",x->text_array,len);
+}
+/* return a new command object */
+void *pdp_3d_text_get_command_object(t_pdp_3d_text *x)
+{
+    t_drawcommand *c = (t_drawcommand *)pdp_dpd_commandfactory_get_new_command(&x->x_clist);
+    c->x_p0 = x->x_p0;
+    c->x_p1 = x->x_p1;
+    c->x_p2 = x->x_p2;
+    c->x_p3 = x->x_p3;
+    c->font = &x->font;
+    c->ofont = &x->ofont;
+    c->bfont = &x->bfont;
+    c->pfont = &x->pfont;
+    c->aface = &x->aface;
+    c->new_font = &x->new_font;
+    c->text_array = x->text_array;
+    c->x_context_packet = pdp_3dp_base_get_context_packet(x);
+    c->x_texture_packet = pdp_packet_copy_ro(pdp_base_get_packet(x, 1));
+
+    c->x_quadric = x->x_quadric; /* $$$TODO: this assumes quadric doesn't change */
+
+    c->x_method = x->x_method;
+    //post("o: %x, vc %x, n %d, u %d", x, c, x->x_clist.nb_commands, c->x_head.used);
+    return c;
+}
+
+/* object drawing methods */
+
+static void draw_clear(t_drawcommand *x)
+{
+    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
+
+}
+
+static void draw_text(t_drawcommand *x)
+{
+
+    int point_size= (int)x->x_p0;
+    if (*x->new_font)
+    {
+	    delete *x->font;
+	    *x->font = NULL;
+            delete *x->aface;
+            *x->aface = new FTFace();
+            if( ! (*(x->aface))->open(*x->new_font) )
+                  post("3dp_text draw: unable to open ttf file: %s",*x->new_font);
+	    free(*x->new_font);
+	    *x->new_font = NULL;
+    }
+    if (*x->font == NULL)
+    {
+      *x->font = new GLTTFont(*x->aface);
+        (*x->font)->setPrecision(x->x_p1);
+      if( ! (*(x->font))->create(point_size) )
+        post("3dp_text: unable to create outline font");
+    }
+    if (x->text_array)
+    {
+        (*(x->font))->output(x->text_array );
+    }
+}
+static void draw_otext(t_drawcommand *x)
+{
+    int point_size= 20;
+    if (*x->new_font)
+    {
+	    delete *x->ofont;
+	    *x->ofont = NULL;
+            *x->aface = new FTFace();
+            if( ! (*(x->aface))->open(*x->new_font) )
+                  post("3dp_text draw: unable to open ttf file: %s",*x->new_font);
+	    free(*x->new_font);
+
+	    *x->new_font = NULL;
+    }
+    if (*x->ofont == NULL)
+    {
+    	*x->ofont = new GLTTOutlineFont(*x->aface);
+    	if( ! (*(x->ofont))->create(point_size) )
+        	post("3dp_text: unable to create outline font");
+    }
+    (*(x->ofont))->output(x->text_array );
+}
+static void draw_ptext(t_drawcommand *x)
+{
+    int point_size= 20;
+    if (*x->new_font)
+    {
+	    delete *x->pfont;
+	    *x->pfont = NULL;
+	    *x->new_font = 0;
+    }
+    if (*x->pfont==NULL)
+    {
+    *x->pfont = new GLTTPixmapFont(*x->aface);
+    if( ! (*(x->pfont))->create(point_size) )
+        post("3dp_text: unable to create outline font");
+    }
+    (*(x->pfont))->output("Delirium Systems" );
+    (*(x->pfont))->output(10,100,"Delirium Systems" );
+}
+static void draw_btext(t_drawcommand *x)
+{
+    int point_size= 20;
+    if (*x->new_font)
+    {
+	    delete *x->bfont;
+	    *x->bfont = NULL;
+	    *x->new_font = 0;
+    }
+    if (x->bfont==NULL)
+    {
+    *x->bfont = new GLTTBitmapFont(*x->aface);
+    if( ! (*(x->bfont))->create(point_size) )
+        post("3dp_text: unable to create outline font");
+    }
+    (*(x->bfont))->output(10,100,"Delirium Systems" );
+}
+
+/* the actual (registered) draw method */
+/* when this is finished, the drawcommand object should commit suicide */
+
+static void draw_process(t_drawcommand *x)
+{
+    int p = x->x_context_packet;
+    int pt = x->x_texture_packet;
+    float fx=1;
+    float fy=1;
+    x->x_have_texture = pdp_packet_texture_isvalid(pt);
+
+    //post("pdp_3d_text: context = %d, texture = %d", p, pt);
+ 
+    /* check if it's a valid buffer we can draw in */
+    if (pdp_packet_3Dcontext_isvalid(p)){ 
+	
+
+	/* setup rendering context */
+	pdp_packet_3Dcontext_set_rendering_context(p);
+
+	/* enable texture */
+	if (x->x_have_texture){
+	    fx = pdp_packet_texture_fracx(pt);
+	    fy = pdp_packet_texture_fracy(pt);
+	    glEnable(GL_TEXTURE_2D);
+	    pdp_packet_texture_make_current(pt);
+	    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
+	    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
+	    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR);
+	    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR);
+	    glTexEnvi(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE);	   
+
+	    /* scale texture matrix to reflect subtexture's coords */
+	    glMatrixMode(GL_TEXTURE);
+	    //glLoadIdentity();
+	    glPushMatrix();
+	    glScalef(fx, fy, 1);
+	    glMatrixMode(GL_MODELVIEW);
+
+	    gluQuadricTexture(x->x_quadric, 1);
+	}
+
+	/* call the generating method */
+	if (x->x_method) (*x->x_method)(x);
+
+	/* disable texture */
+	if (x->x_have_texture){
+	    glMatrixMode(GL_TEXTURE);
+	    glPopMatrix();
+	    glMatrixMode(GL_MODELVIEW);
+	    glDisable(GL_TEXTURE_2D);
+	    gluQuadricTexture(x->x_quadric, 0);
+	}
+
+    }
+
+    /* you know the drill: command done, sword in belly. */
+    pdp_packet_mark_unused(x->x_texture_packet);
+    pdp_dpd_command_suicide(x);
+
+}
+
+static void pdp_3d_text_p0(t_pdp_3d_text *x, t_floatarg f){x->x_p0 = f;}
+static void pdp_3d_text_p1(t_pdp_3d_text *x, t_floatarg f){x->x_p1 = f;}
+static void pdp_3d_text_p2(t_pdp_3d_text *x, t_floatarg f){x->x_p2 = f;}
+static void pdp_3d_text_p3(t_pdp_3d_text *x, t_floatarg f){x->x_p3 = f;}
+
+
+t_class *pdp_3d_text_class;
+
+
+
+void pdp_3d_text_free(t_pdp_3d_text *x)
+{
+    if (x->bfont != NULL){
+	x->bfont->destroy();
+        x->bfont = NULL;
+    }
+    if (x->pfont != NULL){
+	x->pfont->destroy();
+        x->pfont = NULL;
+    }
+    if (x->font != NULL){
+	x->font->destroy();
+        x->font = NULL;
+    }
+    if (x->ofont != NULL){
+	x->ofont->destroy();
+        x->ofont = NULL;
+    }
+    if (x->text_array){
+	    free(x->text_array);
+	    x->text_array = NULL;
+    }
+    pdp_3dp_base_free(x);
+    gluDeleteQuadric(x->x_quadric);
+    pdp_dpd_commandfactory_free(&x->x_clist);
+}
+
+void pdp_3d_text_object(t_pdp_3d_text *x, t_symbol *s)
+{
+    /* find out if it is a buffer operation */
+    if      (s == gensym("clear"))   {x->x_method = (t_pdp_method)draw_clear;   x->x_inlets = 0;}
+
+    /* if not, find ouT Which object we need to draw */
+    else if (s == gensym("polygon"))      {x->x_method = (t_pdp_method)draw_text;    x->x_inlets = 2;}
+    else if (s == gensym("bitmap"))      {x->x_method = (t_pdp_method)draw_btext;    x->x_inlets = 2;}
+    else if (s == gensym("outline"))      {x->x_method = (t_pdp_method)draw_otext;    x->x_inlets = 2;}
+    else if (s == gensym("pixmap"))      {x->x_method = (t_pdp_method)draw_ptext;    x->x_inlets = 2;}
+
+    else {
+	post("pdp_3d_text: object %s not found", s->s_name);
+	x->x_method = 0;
+	x->x_inlets = 0;
+    }
+
+    // the number of texture inlets
+    x->x_tex_in = 1;
+}
+
+extern "C"
+void *pdp_3d_text_new(t_symbol *s, t_floatarg p0, t_floatarg p1, t_floatarg p2, t_floatarg p3)
+{
+    t_pdp_3d_text *x = (t_pdp_3d_text *)pd_new(pdp_3d_text_class);
+       
+    char param[] = "p0";
+    int i;
+
+    /* super init */
+    pdp_3dp_base_init(x);
+
+    x->x_p0 = p0;
+    x->x_p1 = p1;
+    x->x_p2 = p2;
+    x->x_p3 = p3;
+    x->bfont = NULL;
+    x->ofont = NULL;
+    x->pfont = NULL;
+    x->font = NULL;
+    x->new_font = 0;
+    x->text_array = NULL;
+    /* set the object & number of inlets */
+    pdp_3d_text_object(x, s);
+
+    /* create texture inlets */
+    for(i=0; i<x->x_tex_in; i++){
+	pdp_base_add_pdp_inlet(x);
+    }
+
+    /* create additional inlets */
+    for(i=0; i<x->x_inlets; i++){
+	pdp_base_add_gen_inlet(x, gensym("float"), gensym(param));
+	param[1]++;
+    }
+
+    /* create dpd outlet */
+    pdp_3dp_base_add_outlet(x, (t_pdp_method)draw_process, 0);
+
+
+
+   /* setup quadric */
+    x->x_quadric = gluNewQuadric();
+   
+    /* init command list */
+    pdp_dpd_commandfactory_init(&x->x_clist, sizeof(t_drawcommand));
+
+    /* register command factory method */
+    pdp_dpd_base_register_command_factory_method(x, (t_pdp_newmethod)pdp_3d_text_get_command_object);
+
+    x->aface = new FTFace();
+    if( ! x->aface->open("/usr/lib/X11/fonts/TTF/helmetr.ttf") )
+        post("3dp_text: unable to open ttf file");
+    return (void *)x;
+}
+
+
+#ifdef __cplusplus
+extern "C"
+{
+#endif
+
+
+void pdp_3d_text_setup(void)
+{
+
+
+    pdp_3d_text_class = class_new(gensym("3dp_text"), (t_newmethod)pdp_3d_text_new,
+    	(t_method)pdp_3d_text_free, sizeof(t_pdp_3d_text), 0, A_SYMBOL, 
+				  A_DEFFLOAT, A_DEFFLOAT, A_DEFFLOAT, A_DEFFLOAT, A_NULL);
+    pdp_3dp_base_setup(pdp_3d_text_class);
+
+    class_addmethod(pdp_3d_text_class, (t_method)pdp_3d_text_p0, gensym("p0"),  A_DEFFLOAT, A_NULL);  
+    class_addmethod(pdp_3d_text_class, (t_method)pdp_3d_text_p1, gensym("p1"),  A_DEFFLOAT, A_NULL);  
+    class_addmethod(pdp_3d_text_class, (t_method)pdp_3d_text_p2, gensym("p2"),  A_DEFFLOAT, A_NULL);  
+    class_addmethod(pdp_3d_text_class, (t_method)pdp_3d_text_p3, gensym("p3"),  A_DEFFLOAT, A_NULL);  
+    class_addmethod(pdp_3d_text_class, (t_method)pdp_3d_text_text, gensym("text"),  A_GIMME, A_NULL);
+    class_addmethod(pdp_3d_text_class, (t_method)pdp_3d_text_font, gensym("font"),  A_SYMBOL, A_NULL);
+
+    class_addmethod(pdp_3d_text_class, (t_method)pdp_3d_text_delete_texture, gensym("delete_texture"),  A_DEFFLOAT, A_NULL);  
+
+}
+
+#ifdef __cplusplus
+}
+#endif
diff -ruN pdp-0.12.4/opengl/system/setup.c ../t/pdp-0.12.4/opengl/system/setup.c
--- pdp-0.12.4/opengl/system/setup.c	2003-11-25 02:02:50.000000000 +0100
+++ pdp-0.12.4/opengl/system/setup.c	2005-12-27 08:12:52.000000000 +0100
@@ -41,6 +41,8 @@
 void pdp_3d_for_setup(void);
 void pdp_3d_state_setup(void);
 void pdp_3d_subcontext_setup(void);
+void pdp_3d_cal3d_setup(void);
+void pdp_3d_text_setup(void);
 
 
     //#define D(x) { pdp_post_n( #x ".." ); x; pdp_post("done"); }
@@ -73,6 +75,8 @@
     D(pdp_3d_for_setup());
     D(pdp_3d_state_setup());
     D(pdp_3d_subcontext_setup());
+    D(pdp_3d_cal3d_setup());
+    D(pdp_3d_text_setup());
 
 
 }
